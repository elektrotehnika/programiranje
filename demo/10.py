# Низови

непарни = [41, 43, 47, 49]
len(непарни)
непарни[1]
непарни[0] - непарни[3] + len(непарни)
непарни[непарни[3]-непарни[2]]

# Контејнери / Садржаоци

цифре = [1, 8, 2, 8]
1 in цифре
'1' in цифре
[1, 8] in цифре
[1, 2] in [[1, 2], 3]

# For наредбе

def изброј_while(секвенца, вредност):
    """Враћа број појављивања вредности унутар секвенце.

    >>> изброј_while(цифре, 8)
    2
    """
    укупно, индекс = 0, 0
    while индекс < len(секвенца):
        if секвенца[индекс] == вредност:
            укупно = укупно + 1
        индекс = индекс + 1
    return укупно

def изброј_for(секвенца, вредност):
    """Враћа број појављивања вредности унутар секвенце.

    >>> изброј_for(цифре, 8)
    2
    """
    укупно = 0
    for члан in секвенца:
        if члан == вредност:
            укупно = укупно + 1
    return укупно


def изброј_исте(парови):
    """Враћа колико парова има исти члан поновљен (два пута).

    >>> парови = [[1, 2], [2, 2], [2, 3], [4, 4]]
    >>> изброј_исте(парови)
    2
    """
    број_истих = 0
    for x, y in парови:
        if x == y:
            број_истих = број_истих + 1
    return број_истих


# Распони

list(range(5, 8))
list(range(4))
len(range(4))

def збир_до(n):
    укупно = 0
    for i in range(n):
        укупно += i
    return укупно

def навијај():
    for _ in range(3):
        print('Напред, Звездо!')


# Низовна убрајања

непарни = [1, 3, 5, 7, 9]
[x+1 for x in непарни]
[x for x in непарни if 25 % x == 0]

def делиоци(n):
    """Враћа природне бројеве са којима је n дељиво.

    >>> делиоци(1)
    [1]
    >>> делиоци(4)
    [1, 2]
    >>> делиоци(12)
    [1, 2, 3, 4, 6]
    >>> [n for n in range(1, 1000) if sum(делиоци(n)) == n]
    [1, 6, 28, 496]
    """
    return [1] + [x for x in range(2, n) if n % x == 0]

def непаран(x):
    return x % 2 == 1

def унапређени(секвенца, f):
    """Враћа низ истих чланова као секвенца, али са свим
    члановима за које је f(члан) тачно/True испред осталих.

    >>> унапређени(range(10), непаран)  # непарни напред
    [1, 3, 5, 7, 9, 0, 2, 4, 6, 8]
    """
    return [члан for члан in секвенца if f(члан)] + \
           [члан for члан in секвенца if not f(члан)]
