# Рад

class Радник:
    поздрав = 'Господине'
    def __init__(self):
        self.elf = Радник
    def рад(self):
        return self.поздрав + ', ја радим'
    def __repr__(self):
        return Буржоазија.поздрав

class Буржоазија(Радник):
    поздрав = 'Пеон'
    def рад(self):
        print(Радник.рад(self))
        return 'Мој посао је да сакупљам богатство'

пера = Радник()
мика = Буржоазија()
пера.поздрав = 'Мадам'

def рад():
    """Рад.

    >>> Радник().рад()
    'Господине, ја радим'
    >>> пера
    Пеон
    >>> пера.рад()
    'Мадам, ја радим'
    >>> мика.рад()
    Пеон, ја радим
    'Мој посао је да сакупљам богатство'
    >>> мика.elf.рад(мика)
    'Пеон, ја радим'
    """

# Уграђене функције & убрајања

def min_abs_индекси(с):
    """Индекси свих чланова низа с који су најмањи по апсолутној вредности.

    >>> min_abs_индекси([-4, -3, -2, 3, 2, 4])
    [2, 4]
    >>> min_abs_индекси([1, 2, 3, 4, 5])
    [0]
    """
    min_abs = min(map(abs, с))
    return list(filter(lambda i: abs(с[i]) == min_abs, range(len(с))))
    # ИЛИ
    return [i for i in range(len(с)) if abs(с[i]) == min_abs]

def највећи_збир_суседа(с):
    """Највећи збир два суседна члана у низу с.

    >>> највећи_збир_суседа([-4, -3, -2, 3, 2, 4])
    6
    >>> највећи_збир_суседа([-4, 3, -2, -3, 2, -4])
    1
    """
    return max([x + y for x, y in zip(с[:-1], с[1:])])
    # ИЛИ
    return max([с[i] + с[i + 1] for i in range(len(с) - 1)])
    # ИЛИ
    return max(map(lambda i: с[i] + с[i + 1], range(len(с) - 1)))

def речник_цифара(с):
    """Ствара речник чији су кључеви цифре ц, а вредности низови чланова низа с који се завршавају са ц.

    >>> речник_цифара([5, 8, 13, 21, 34, 55, 89])
    {1: [21], 3: [13], 4: [34], 5: [5, 55], 8: [8], 9: [89]}
    """
    return {i: [x for x in с if x % 10 == i] for i in range(10) if any([x % 10 == i for x in с])}
    # ИЛИ
    последња_цифра = list(map(lambda x: x % 10, с))
    return {i: [x for x in с if x % 10 == i] for i in range(10) if i in последња_цифра}

def сви_имају_једнаког(с):
    """Да ли је сваки члан из с једнак неком другом члану у с?

    >>> сви_имају_једнаког([-4, -3, -2, 3, 2, 4])
    False
    >>> сви_имају_једнаког([4, 3, 2, 3, 2, 4])
    True
    """
    return all([sum([1 for y in с if x == y]) > 1 for x in с])
    # ИЛИ
    return min([sum([1 for y in с if x == y]) for x in с]) > 1
    # ИЛИ
    return all([с[i] in с[:i] + с[i+1:] for i in range(len(с))])
    # ИЛИ
    return all(map(lambda x: с.count(x) > 1, с))
    # ИЛИ
    return min([с.count(x) > 1 for x in с]) > 1

# Уланчане листе

def уређена(с, key=lambda x: x):
    """Да ли је Листа с уређена?

    >>> уређена(Листа(1, Листа(3, Листа(4))))
    True
    >>> уређена(Листа(1, Листа(4, Листа(3))))
    False
    >>> уређена(Листа(1, Листа(-3, Листа(4))))
    False
    >>> уређена(Листа(1, Листа(-3, Листа(4))), key=abs)
    True
    >>> уређена(Листа(-4, Листа(-1, Листа(3))))
    True
    >>> уређена(Листа(-4, Листа(-1, Листа(3))), key=abs)
    False
    """
    if с is Листа.празно or с.остатак is Листа.празно:
        return True
    elif key(с.први) > key(с.остатак.први):
        return False
    else:
        return уређена(с.остатак)

def спој(с, т):
    """Враћа сортирану Листу која садржи све чланове сортираних с & т.

    >>> а = Листа(1, Листа(5))
    >>> б = Листа(1, Листа(4))
    >>> спој(а, б)
    Листа(1, Листа(1, Листа(4, Листа(5))))
    >>> а
    Листа(1, Листа(5))
    >>> б
    Листа(1, Листа(4))
    """
    if с is Листа.празно:
        return т
    elif т is Листа.празно:
        return с
    elif с.први <= т.први:
        return Листа(с.први, спој(с.остатак, т))
    else:
        return Листа(т.први, спој(с, т.остатак))

def спој_у_месту(с, т):
    """Враћа сортирану Листу која садржи све чланове сортираних с & т.

    >>> а = Листа(1, Листа(5))
    >>> б = Листа(1, Листа(4))
    >>> спој_у_месту(а, б)
    Листа(1, Листа(1, Листа(4, Листа(5))))
    >>> а
    Листа(1, Листа(1, Листа(4, Листа(5))))
    >>> б
    Листа(1, Листа(4, Листа(5)))
    """
    if с is Листа.празно:
        return т
    elif т is Листа.празно:
        return с
    elif с.први <= т.први:
        с.остатак = спој_у_месту(с.остатак, т)
        return с
    else:
        т.остатак = спој_у_месту(с, т.остатак)
        return т

class Листа:
    """Уланчана листа.

    >>> Листа(1, Листа(2, Листа(3)))
    Листа(1, Листа(2, Листа(3)))
    >>> с = Листа(1, Листа(Листа(2, Листа(3)), Листа(4)))
    >>> с
    Листа(1, Листа(Листа(2, Листа(3)), Листа(4)))
    >>> print(с)
    <1 <2 3> 4>
    """

    празно = ()

    def __init__(self, први, остатак=празно):
        assert остатак is Листа.празно or isinstance(остатак, Листа)
        self.први = први
        self.остатак = остатак

    def __repr__(self):
        if self.остатак:
            остатак_repr = ', ' + repr(self.остатак)
        else:
            остатак_repr = ''
        return 'Листа(' + repr(self.први) + остатак_repr + ')'

    def __str__(self):
        ниска = '<'
        while self.остатак is not Листа.празно:
            ниска += str(self.први) + ' '
            self = self.остатак
        return ниска + str(self.први) + '>'
