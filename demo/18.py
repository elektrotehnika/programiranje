class Рачун:
    """Рачун има власника и стање.

    >>> р = Рачун('Влада')
    >>> р.власник
    'Влада'
    >>> р.депонуј(100)
    100
    >>> р.подигни(90)
    10
    >>> р.подигни(90)
    'Недовољно средстава'
    >>> р.стање
    10
    >>> р.камата
    0.02
    """

    камата = 0.02  # Атрибут класе

    def __init__(self, власник_рачуна):
        self.власник = власник_рачуна
        self.стање = 0

    def депонуј(self, износ):
        """Додаје износ на стање."""
        self.стање = self.стање + износ
        return self.стање

    def подигни(self, износ):
        """Одузима износ од стања уколико је довољно."""
        if износ > self.стање:
            return 'Недовољно средстава'
        self.стање = self.стање - износ
        return self.стање


class ТекућиРачун(Рачун):
    """Банковни рачун који наплаћује провизију приликом подизања новца.

    >>> тр = ТекућиРачун('Влада')
    >>> тр.стање = 20
    >>> тр.подигни(5)
    14
    >>> тр.камата
    0.01
    """

    провизија = 1
    камата = 0.01

    def подигни(self, износ):
        return Рачун.подигни(self, износ + self.провизија)
        # Алтернативно:
        return super().подигни(износ + self.провизија)


class Банка:
    """Банка има рачуне и плаћа камату.

    >>> банка = Банка()
    >>> прле = банка.отвори_рачун('Прле', 10)
    >>> тихи = банка.отвори_рачун('Тихи ', 5, ТекућиРачун)
    >>> тихи.камата
    0.01
    >>> прле.камата = 0.06
    >>> банка.плати_камату()
    >>> прле.стање
    10.6
    >>> тихи.стање
    5.05
    """
    def __init__(self):
        self.рачуни = []

    def отвори_рачун(self, власник, износ, тип_рачуна=Рачун):
        """Отвара тип_рачуна на име власник(а) и депонује износ."""
        рачун = тип_рачуна(власник)
        рачун.депонуј(износ)
        self.рачуни.append(рачун)
        return рачун

    def плати_камату(self):
        """Исплаћује камату свим рачунима."""
        for рачун in self.рачуни:
            рачун.депонуј(рачун.стање * рачун.камата)


# Пример наслеђивања

class A:
    z = -1
    def f(self, x):
        return B(x-1)

class B(A):
    n = 4
    def __init__(self, y):
        if y:
            self.z = self.f(y)
        else:
            self.z = C(y+1)

class C(B):
    def f(self, x):
        return x

def ШБПП():
    """Шта би Пајтон приказао?

    >>> a = A()
    >>> b = B(1)
    >>> b.n = 5
    >>> C(2).n
    4
    >>> C(2).z
    2
    >>> a.z == C.z
    True
    >>> a.z == b.z
    False
    >>> b.z.z.z
    1
    """


# Вишеструко наслеђивање

class ШтедниРачун(Рачун):
    """Банковни рачун који наплаћује накнаду за депоновање."""

    накнада = 2

    def депонуј(self, износ):
        return Рачун.депонуј(self, износ - self.накнада)


class ПромотивниРачун(ТекућиРачун, ШтедниРачун):
    """Банковни рачун који наплаћује за све, и депоновање и подизање."""

    def __init__(self, власник_рачуна):
        self.власник = власник_рачуна
        self.стање = 1  # Бесплатан динар!

надкласе = [к.__name__ for к in ПромотивниРачун.mro()]
